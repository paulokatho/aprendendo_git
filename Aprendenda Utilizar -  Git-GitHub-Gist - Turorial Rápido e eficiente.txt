

			Git e GitHub / Gist-Pequenos trechos de código
			
			
- Git é um versionador de projetos e GitHub é é um famoso repositório de código, uma rede social do Git.

- Git foi criado em 2005 por Linus Torvalds.
- GitHub foi criado em 2008
	- O github possui um serviço para o compartilhamento de arquivos únicos ou parte de
		códigos: Gist.
		
		Gist é um repositório git que está no link: gist.github.com
	
	- Todo gist é um repositório git. O Gist permite o campartilhamento de pequenos 
		trechos de código.
	- Ele é muito bacana para pequenos trechos de códigos publicos ou privados e que pode
		até ter comentários. Uma forma bem rápida e prática de compartilhar e armazenar
		trechos de códigos.
		
	- Depois que publicou um trecho de código é possível fazer revisar ou editar e depois 
		é só clicar no Update public gist.

****************	Download do Git	****************
		
- Ir em msysgit.github.io que ele identifica seu sistema operacional e redireciona a página
	para pagina de download.
	
	- Apos baixar, instalar o github.
	
	- Abra o terminal Bash e utilize alguns comandos basicos iniciais para ir se familiarizando.
	
	- ls : lista itens
	- git --version : versão do git que está usando
	- Ctrl+l : limpa a tela
	
	- cd desktop : cd muda de diretorio, nesse caso vai para o diretório desktop
	- cd .. : para voltar um diretório
	- mkdir pasta : mkdir cria uma pasta, aqui chamada pasta no diretorio que voce informou
	- rmdir pasta : rmdir remove a pasta do diretório
	

  ****************	Fazendo o cadastro no git com o e-mail e senha	****************

- git config --global user.name "alfredoborba"
- git config --global user.email "alfborba@gmail.com"

  
****************	Versionando arquivos	****************
  
 - Criando uma pasta no Desktop para inserir arquivos nela.
 
	cd desktop
	mkdir arquivos_git
	cd arquivos_git
	
	- Criando um arquivo .txt dentro da pasta arquivos_git
	
		touch arq1.txt
	
	- Inseriando texto no arq1.txt e lendo o conteúdo do arquivo. Ir até onde está a pasta arquivos_git
	
		echo "esse eh meu arquivo git" >> arq1.txt - cria o texto no arquivo arq1.txt
	
		cat arq1.txt - lê o conteúdo do arquivo
	
	
  ****************	Tornando um diretório em um Repósitorio Git	**************** 
  
- dentro do diretorio escolhido, por exemplo, arquivos_git digitar.

	git init
	
	- Ali dentro do diretorio será criado um arquivozinho .git e o repositorio já está inicializado
	

****************	Verificando a situação do arquivo ou arquivos no repositório	**************** 
  
  - digitar git status e os arquivos que não estão rastreados ficarao em vermelho
  
	git status
	
- Para rastrear o arquivo

	git add arq1.txt 
	git status
	
	- Agora o arquivo vai aparecer em verde na tela
	
- Mesmo o arquivo tendo sido rastreado pelo git ele ainda não foi commitado. Então agora
	gravar os arquivos no repositorio.
	- O nome do commite vai ser "arquivo inicial", mas pode ser qualquer nome facil para 
		montar suas versões. Esse nome é somente para fins didáticos.
	
	git commit -m "arquivo inicial"
	
	git status
	
	- O git vai avisar que não existe mais o arquivo para ser commitado. Ou seja, ele vai 
		desaparecer do repositorio e vai subir.
		
- Agora ir no arq1.txt e inserir mais algum texto "Mais um texto" para modificarmos a versão
	do arquivo.

	echo "Mais um texto"
	cat arq1.txt
	git status

	git add arq1.txt
	commit -m "inserida uma nova linha"
	git status
	

  ****************	Vendo o historico das alterações	**************** 	
  
- Log de verificação e controle de alterações

	git log
	
	- Mostra o autor, email, quantidade de commites, data, hora...
	
	
	
  ****************	Compartilhando as alterações no GitHub	**************** 	
  
- Ir no github.com e criar um novo repositório <New Repository>
- Inserir um nome para o repositorio "curso_git"
- Description: Repositório do curso de Git e GitHub
- Selecionar público
- Clicar em <Create Repository>
	
	- Assim acaba de ser criado um repositório vazio no GitHub.

  ****************	Apontando nosso repositóio para o GitHub	**************** 
  
- Certifique-se que está no diretório correto, exemplo, desktop/arquivos_git
- Ir até o repositorio que foi criado e selecionar o endereço do link, algo parecido com:
	https://github.com/paulokatho/aprendendo_git.git
- Voltar no Bash e digitar e colar o endereço do link copiado:
	git remote add origin https://github.com/paulokatho/aprendendo_git.git


  ****************	Enviando e Recebendo as alterações para o GitHub	**************** 
  
- Enviando as alterações para a página do github
- Digitar no Bash git status e verificar se o que você quer já está commitado.
- digitar o push para enviar os arquivos

	git status
	git push origin master
	
	- Agora recebendo o projeto do github
	
	- Ir até a pagina do github e pegar o endereço para fazer o download, chamado de "clone"
		do projeto. Clique no botão verde <Clone or download> e copie o link
	
	- Crie uma nova pasta no diretorio que quiser fazer o download e vá até o bash e entre no 
		diretório, por exemplo, desktop/teste.
	- Insira o comando, lembrando que o link você tem que ter copiado do seu repositorio.
	
		git clone https://github.com/paulokatho/aprendendo_git.git
		
	- Depois disso pode digitar ls e entre na pasta que foi baixada. Depois digite cat para poder ver o conteúdo do 
		arquivo
		
		ls
		cd curso_git (nome da pasta que você baixou)
		cat arq1.txt (voce verifica o conteúdo que foi baixado)
		
	
  ****************	Rastreando todos os arquivos de uma vez	**************** 	
  
- Crie mais dois arquivos de texto na pasta arquivos_git, por exemplo.
- Insira textos neles e salve nesse diretorio arquivos_git mesmo.
- git add rastreia todos os arquivos de uma só vez.
- depois só commitar de dar um git push

	git add .
	git commit -m "Arquivos adicionados agora"
	git push origin master
	
	- Pronto! Seus arquivos estão no repositório do git hub
	- Só ir la na página do github e atualizar que seus arquivos já estão la...
	
  ****************	Área Stage	**************** 	
  
- Quando se rastreia um arquivo com o git add, o git coloca esses arquivos em uma área chamada
	"stage".
	- Uma vez que o arquivo está na area stage todas as mudanças nesse arquivo serão examinadas, portando
		todas as alterações deve ser seguidas do comando git add para serem enviadas ao 
		repositorio posteriormente.
	- Então quando voce deu um add seu arquivo está rastreado, mas não foi gravado.
		- Se você fez alguma alteração antes de gravar e não deu add, as novas alterações não estão
			rastreadas e nem gravadas.

			
  ****************	Ignorando arquivos	**************** 	
  
- Se por acaso você ter arquivos no seu diretório que não quer que seja rastreado,
	você pode ignorar esses arquivos
- Se por exemplo, você tiver um arquivo "meus_arquivos.txt".

	- Você cria uma arquivo que será ignorado e coloca dentro desse arquivo os nomes que quer que seja ignorado
	
		touch .gitignore
		echo "arquivos que serão ignorados.txt" >> .gitignore
		cat .gitignore
		
		git status
		
			- Agora subir o arquivo .gitignore
		
		git add .gitignore
		git commit -m "Adicionando gitignore"
		git push origin master
		
		- Ir no site do github e atualizar para verificar o arquivo gitignore e dentro dele os arquivos
			serão ignorados
	
	- Dá para ignorar diretórios
	
		Exemplo: Também é possível abrir o arquivo gitignore e colocar na mão o que será ignorado
		
		echo "tmp/" >> .gitignore
		
	- Ignorando varios arquivos de uma vez, com a mesma extensão
	
		echo "*.log" >> .gitignore
		
	
	--- Obs
	
	- Em java o pessoal ignora os arquivos .jar e .class
	- Em python ignoram os arquivos .pyc
	- No windows quem trabalha com C++ ignora .exe
	
	
		
  ****************	Rastreando e Commitando	ao mesmo tempo	**************** 			
  
			*** Obs: git commit -am (a rastreia e m é de mensagem) ***
			
- Faça alguma alteração no arquivo arq1.txt, insira algum novo texto e agora vai ter algo
	para ser rastreado e commitado.
	
	git status
	git commit -am "arquivo 1 alterado"
	git status
	git push origin master
	
	- Vá ate o site do github e verifique seu arquivo para ver se ele está com as alteraçãos
		que você modificou.
		
		
		
  ****************	Verificando o histórioco do seu repositório	**************** 		
	
- Imagine todo o historico depois de um tempo que você utiliza o github, vai ter bastante
	informação no log. Digite git log e veja como já está seu historico.
	
- Podemos ver por exemplo os 3 últimos commits com git log -n 3, o número depende do que você precisa

- Resumo dos commits git log --oneline

- Resumo dos arquivos alterados com número de linhas adicionadas e excluídas git log --stat


	git log
	git log -n 3
	git log --oneline
	git log --stat
	
  ****************	Removendo arquivos do seu repositório	**************** 	
  
- Podemos remover os arquivos do nosso repositório.
- Digite ls e verifique seus arquivos. Se não tiver outro arq2.txt para teste, crie um arq2.txt e faça o 
	commit para ele subir para seu repositório.
- Precisamos deletar e adicionar esse arquivo na stage.

	ls
	git rm arq2.txt (rm - deleta o arquivo e já insere na area de stage)
	git commig -m "arq2.txt foi apagado"
	git push origin master
	
- Ir no seu github e verificar que o arq2.txt foi deletado.
	
 
  ****************	Fazendo renomeação dos arquivos	**************** 
  
- Vamos renomear o nosso arq1.txt para arq.txt.

	ls
	git mv arq1.txt arq.txt
	git status (renamed: arq1.txt -> arq.txt)
	
- No git status ele vai estar verde, então está na área de stage e está pronto para ser commitado

	git commit -m "arq1.txt renomeado para arq.txt"
	git push origin master
	
- Entre no seu github e atualize o browser e verifique as alterações.


  ****************	Desfazendo mudanças NÃO RASTREADAS	**************** 
	
- Insira um texto no arq.txt e verifique o status. Depois com o comando checkout você consegue desfazer essas
	alterações que ainda não foram rastreadas.
	
		echo arq.txt "Desfazendo mudanças não rastreadas"
		git status (veja que ainda não foi para area de stage, o arquivo está em vermelho)
		cat arq.txt (verifique o texto novo)
		git checkout -- arq.txt
		git status
		cat arq.txt (verifique que o texto foi deletado)
		
- Digamos que você tenha deletado um arquivo sem querer, também é possível recuperar, antes dele estar
	rastreado.
	
		git rm arq.txt
		git status
		git ls (verifique que o arquivo foi deletado)
		git checkout HEAD -- arq.txt
		ls (veja que o arquivo voltou para sua pasta)
	
  
  ****************	Desfazendo mudanças RASTREADAS	**************** 	
  
- Arquivo rastreado é quando foi feito git add arq.txt
- Inserir um novo texto no seu arq.txt. Para desfazermos as alterações.

	echo "Desfazendo mudanças rastreadas" >> arq.txt
	cat arq.txt (verifique o seu texto)
	git add arq.txt (adicionando no stage)
	git status (verificando que está verde)
	
- Se não for passado nenhum parâmetro será retirado todos os seus arquivos da area stage, onde estão
	seus arquivos rastreados.
	
	git reset --hard
	cat arq.txt (veja que não está mais o texto "Desfazendo mudanças rastreadas")
	
- O comando acima retira todos os arquivos da area de stage e desfaz as alterações nos arquivos.


  ****************	Desfazendo mudanças COMMITADAS	**************** 

- Insira um novo texto no arq.txt e faça o commit.


	echo"Desfazendo mudanças comitadas" >> arq.txt
	git status
	git add arq.txt
	git commit -m "Aprendendo desfazer mudanças comitadas"
	
- Após commmitar temos que encontrar o código do commit que queremos. Para isso
	vamos ver o log e copie o código, por exemplo, c0c8ccb Aprendendo desfazer mudanças comitadas.
	
		git log -n 1 --oneline (uu git log --oneline e copie o código do commit que foi feito)
		git revert --not-edit c0c8ccb
		cat arq.txt (o texto ainda continua no arquivo)		
		
- Veja o conteúdo do seu arq.txt com cat e veja que o texto novo ainda está lá. 
- Vamos reverter o arquivo que foi commitado com git reset e veja o status, vai estar em vermelho (modified: arq.txt).

	git reset HEAD~1 (commit revertido - voltamos a alteração, ou seja ele volta a ficar vermelhor e na área de stage)
	git status
	
- Como ele está na area stage ele voltou ao passo anterior.
- Agora usando git reset hard, pois está na area de stage rastreado.
	Então esse comando como visto algumas sessões anteriores é usado para desfazer alterações depois de ser rastreado.
	E depois deste comando dá para ver que o status não há nada para comitar. 
	Todas as alterações foram desfeitas.

	git reset --hard
	git status
	cat arq.txt (veja que não está mais o texto "Aprendendo desfazer mudanças comitadas")
	
- Então você colocou ele na área stage rastreado e depois comitou. Depois desfez o commit. Logo depois foi retirado
	também do stage.
	

  ****************	Vendo sobre hospedagem de projetos	**************** 
  
	Falando um pouquinho sobre hospedagem de projetos na internet. 
	Existem varios sites para hospedagem e um deles é o github, outro muito bom é o Bitbucket. O grande diferencial do 
gitbucket é que ele permite criar projetos privados gratuitamente e aceita guit. A finalidade destes serviços, assim como 
o guithub é tornar visível seus projetos para o mundo todo.
	Assim também como os projetos open source que podem ser acessados pelo mundo todo, todo desenvolvedor tem a chance de 
conseguir ver o código destes projetos.
	
	O github hoje em dia é o maior provedor desse tipo de serviço e grandes projetos estão no github, como por exemplo,
JQuery.
	O github também é uma ferramenta colaborativa, pois permite a interação com outros programadores, ter projetos sendo 
desenvolvidos com ajuda de outros desenvolvedores ao redor do mundo.
	
	Como exemplo pode ser o visto o projeto django, que é um framework web desenvolvido em python.
	No site do github vá para pagina inicial e digite django e veja a quantidade de contribuidores (desenvolvedores) e
também dá para ver o total de commits feitos.

	Dessa forma você pode aprender com esses projetos, dar uma olhada em como o pessoal organiza, desenvolve a lógica, etc.

	Muito bom dar uma olhada no código de outras pessoas para evoluir.

	
  ****************	Pull Request	**************** 	
  
	Pull Request é uma solução do github para a contribuição de projetos open source. Você pode contribuir para os projetos
open source que estão alocados no github.

	Como exemplo, vamos até o site do github e vamos pesquisar o projeto django.
	Supondo que estejamos querendo começar a contribuir com o projeto depois de encontrar ele no github é só clicar
em fork, assim o github estará fazendo uma cópia do repositório para o meu usuário.
	Então se formos ali na nossa aba Repositories veremos que foi criado o repositório django.
		
		<clique em fork quando estiver no projeto django, por exemplo>
	
	Se quisermos contribuir com esse projeto, basta clonar ele como ensinado alguns itens acima. Então fique atento ao fazer 
esse procedimento, pois clone o link do seu repositorio djando e não o clone do projeto deles. Se não você não irá conseguir 
fazer o push, permissão negada.

	Crie uma nova pasta no diretorio que você deseja e faça o clone/download do seu projeto lá.
	Não esqueça de ir no git bash e entrar no diretorio onde você criou sua nova pasta, exemplo,
desktop/projetos_git/django
	Após estar no diretório corretor fazer o clone/download do projeto.
	
		git clone https://github.com/paulokatho/django.git
		
- Espere o download do projeto.

- Agora todas as alterações que você quer ou precisa fazer, você pode comitar.

- Mas para você conseguir de fato contribuir e enviar todas as alteração para o projeto inicial é necessário
fazer o PULL REQUEST, para que seja feito um pull request do seu projeto.

	Ir na aba <Pull Requests> lá no seu perfil do github.
	As alterações que você vier a fazer no projeto django vão aparecer nesse lugar. E o pessoal do projeto django
iria receber alguma notificação do proprio github. Dessa forma ele poderia estar pegando as alterações e adicionando
ao projeto original. Dessa maneira que os projetos open source são criados e desenvolvidos por seus contribuidores.


  ****************	Falando sobre as Branches	**************** 	

	Nesse mesmo momento você tem que continuar mexendo no projeto original, mas quer desenvolver
algo novo para você mesmo ou para mostrar para alguém. Ou uma nova funcionalidade, mas não quer mexer no projeto original.
	Você então pode criar as branches para poder ter esse jeito de trabalhar de forma paralela ao projeto.
	Todas as ferramentas de controle versão estão permitindo que você trabalhe com branches.
	
	Essa branche permite um tipo de trabalho independente do projeto principal. Em que pode ser comitado esses novos códigos
sem afetar o projeto original ou outras branches.

	O git oferece maneira muito ageis de se trabalhar com branches.
	Veja um exemplo.
	
- No terminal do git bash digite git branch e será exibido os branches que você tem.
	Não esquecer de retornar para a pasta de estudos, exemplo, desktop/arquivos_git.
	
		git branch
	
	- Será exibido no terminal um branche chamado master, esse branche é criado por default pelo proprio git.
		Todas os commites efetuados por nós foi nesse branche master.
	
		- Existe um * do lado do nome do branch, isso indica que esse é o branch atual, no que estamos trabalhando.
			Exemplo: * master
			
		- Pode-se dizer que todo branch é um apontador para um commit. A cada commit feito essa brach é movida 
			automaticamente passando a apontar para esse novo commit.
		- Por default o branch master aponta para o último commit que foi relizado.

	
  ****************	Criando seu primeiro branch	**************** 	
  

  
  
	
	

	
	
	






	
	
	
